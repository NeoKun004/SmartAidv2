"""
Solution module for dyscalculia (math learning disability).

This module provides personalized learning activities and tools
for students who struggle with mathematics.
"""

import streamlit as st
from typing import Dict, Any

def generate_dyscalculia_prompt(analysis_results: str, user_info: Dict[str, Any]) -> str:
    """
    Generates a custom prompt for the LLM to create a tailored solution
    for a student with dyscalculia.
    
    Args:
        analysis_results: Analysis of test results as string
        user_info: User information (age, name, class, etc.)
        
    Returns:
        A prompt string for the LLM
    """
    age = user_info.get("age", "unknown")
    class_level = user_info.get("classe", "unknown")
    name = user_info.get("nom", "l'√©l√®ve")
    
    # Extract test performance if available
    test_performance = ""
    if user_info.get("q1") is not None:
        test_performance += f"- Question 1 (Addition 5+3): {user_info['q1']} (r√©ponse correcte: 8)\n"
    if user_info.get("q2") is not None:
        test_performance += f"- Question 2 (Soustraction 10-4): {user_info['q2']} (r√©ponse correcte: 6)\n"
    if user_info.get("q3") is not None:
        test_performance += f"- Question 3 (Suite logique): {user_info['q3']} (r√©ponse correcte: 10)\n"
    if user_info.get("q4") is not None:
        test_performance += f"- Question 4 (Comparaison): {user_info['q4']} (r√©ponse correcte: Une voiture)\n"
    
    # Create the prompt with detailed information about the student's difficulties
    prompt = f"""
    Tu es un assistant p√©dagogique sp√©cialis√© pour les √©l√®ves ayant une dyscalculie (trouble d'apprentissage des math√©matiques).

    Informations sur l'√©l√®ve:
    - Nom: {name}
    - √Çge: {age} ans
    - Niveau scolaire: {class_level}
    
    Performance au test de dyscalculie:
    {test_performance}
    
    Analyse des r√©sultats:
    {analysis_results}
    
    Ta mission est de cr√©er un plan d'apprentissage personnalis√© qui r√©pond aux besoins sp√©cifiques de cet √©l√®ve. Le plan doit inclure exactement les sections suivantes:

    1. TROIS exercices visuels de math√©matiques qui aident √† la compr√©hension des nombres. Chaque exercice doit √™tre tr√®s concret, pratique, et utiliser des objets ou des images que l'enfant peut manipuler.

    2. DEUX jeux amusants qui am√©liorent le raisonnement math√©matique et rendent les math√©matiques ludiques. Les jeux doivent √™tre adapt√©s √† un enfant de {age} ans et doivent pouvoir √™tre jou√©s avec du mat√©riel simple (papier, crayons, d√©s, jetons).

    3. UN outil de "Calculatrice Assist√©e" expliqu√© √©tape par √©tape, qui montre comment d√©composer les calculs pour les rendre plus faciles. Cette m√©thode doit √™tre pr√©sent√©e comme un processus tr√®s visuel.

    4. TROIS messages d'encouragement sp√©cifiques aux math√©matiques qui renforcent la confiance. Ces messages doivent √™tre positifs, color√©s, et adapt√©s √† un enfant de {age} ans.

    Rends tout le contenu attractif et appropri√© pour un enfant de {age} ans. Utilise un langage simple, des √©mojis, et de nombreuses m√©taphores visuelles.
    
    IMPORTANT: Tu dois formater ta r√©ponse EXACTEMENT selon la structure suivante, en gardant ces titres markdown pr√©cis:
    
    ## Exercices Visuels de Math√©matiques
    
    [Trois exercices d√©taill√©s avec explications claires]
    
    ## Jeux Math√©matiques Amusants
    
    [Deux jeux d√©taill√©s avec r√®gles claires]
    
    ## Calculatrice Assist√©e
    
    [M√©thode de calcul pas √† pas avec exemples]
    
    ## Messages d'Encouragement
    
    [Trois messages motivants num√©rot√©s]
    """
    
    return prompt

def parse_dyscalculia_solution(llm_response: str) -> Dict[str, Any]:
    """
    Parses the LLM response into structured solution components.
    
    Args:
        llm_response: Raw response from the LLM
        
    Returns:
        Dictionary with parsed solution components
    """
    # Simple parsing based on markdown headers
    sections = {
        "visual_exercises": "",
        "math_games": "",
        "calculator_helper": "",
        "encouraging_messages": ""
    }
    
    current_section = None
    
    lines = llm_response.split('\n')
    for i, line in enumerate(lines):
        # Check what section we're in
        if "## Exercices Visuels de Math√©matiques" in line:
            current_section = "visual_exercises"
            continue
        elif "## Jeux Math√©matiques Amusants" in line:
            current_section = "math_games"
            continue
        elif "## Calculatrice Assist√©e" in line:
            current_section = "calculator_helper"
            continue
        elif "## Messages d'Encouragement" in line:
            current_section = "encouraging_messages"
            continue
        
        # Add the line to the current section if we're in a section
        if current_section and line.strip():
            sections[current_section] += line + "\n"
    
    return sections

def display_dyscalculia_solution(solution_components: Dict[str, Any]) -> None:
    """
    Displays the dyscalculia solution components in the Streamlit UI.
    
    Args:
        solution_components: Parsed solution components from the LLM
    """
    # Setup nice, colorful containers for each section
    
    # Display Visual Math Exercises
    st.markdown("""
    <div style="background-color: rgba(255,255,255,0.7); padding: 20px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); border: 3px solid #4ECDC4;">
        <h3 style="color: #4ECDC4; text-align: center;">üßÆ Exercices Visuels de Math√©matiques</h3>
    </div>
    """, unsafe_allow_html=True)
    
    visual_exercises = solution_components["visual_exercises"]
    if visual_exercises.strip():
        with st.container():
            st.markdown(visual_exercises)
    else:
        st.warning("Aucun exercice visuel n'a √©t√© g√©n√©r√©. Veuillez r√©essayer.")
    
    # Display Fun Math Games
    st.markdown("""
    <div style="background-color: rgba(255,255,255,0.7); padding: 20px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); border: 3px solid #5D5FEF;">
        <h3 style="color: #5D5FEF; text-align: center;">üéÆ Jeux Math√©matiques Amusants</h3>
    </div>
    """, unsafe_allow_html=True)
    
    math_games = solution_components["math_games"]
    if math_games.strip():
        with st.container():
            st.markdown(math_games)
    else:
        st.warning("Aucun jeu math√©matique n'a √©t√© g√©n√©r√©. Veuillez r√©essayer.")
    
    # Display Calculator Helper
    st.markdown("""
    <div style="background-color: rgba(255,255,255,0.7); padding: 20px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); border: 3px solid #FF6B6B;">
        <h3 style="color: #FF6B6B; text-align: center;">üî¢ Calculatrice Assist√©e</h3>
    </div>
    """, unsafe_allow_html=True)
    
    calculator_helper = solution_components["calculator_helper"]
    if calculator_helper.strip():
        with st.container():
            st.markdown(calculator_helper)
    else:
        st.warning("Aucune assistance calculatrice n'a √©t√© g√©n√©r√©e. Veuillez r√©essayer.")
    
    # Display Encouraging Messages
    st.markdown("""
    <div style="background-color: rgba(255,255,255,0.7); padding: 20px; border-radius: 15px; margin-bottom: 20px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); border: 3px solid #FFD166;">
        <h3 style="color: #FFD166; text-align: center;">‚≠ê Messages d'Encouragement</h3>
    </div>
    """, unsafe_allow_html=True)
    
    encouraging_messages = solution_components["encouraging_messages"]
    if encouraging_messages.strip():
        with st.container():
            st.markdown(encouraging_messages)
    else:
        st.warning("Aucun message d'encouragement n'a √©t√© g√©n√©r√©. Veuillez r√©essayer.")

def provide_dyscalculia_solution(analysis_results: str, user_info: Dict[str, Any], llm_connector) -> None:
    """
    Main function to provide dyscalculia solutions.
    
    Args:
        analysis_results: Analysis of test results as string
        user_info: User information (age, name, class, etc.)
        llm_connector: Instance of the LLM connector
    """
    # Check if we already have solutions in session state to avoid re-generating
    if 'dyscalculia_solution' not in st.session_state:
        try:
            # Generate prompt for the LLM
            prompt = generate_dyscalculia_prompt(analysis_results, user_info)
            
            # Get system prompt
            system_prompt = "Tu es un assistant p√©dagogique sp√©cialis√© pour les enfants ayant des troubles d'apprentissage. Ton objectif est de cr√©er du mat√©riel d'apprentissage attrayant, color√© et efficace qui aide les enfants √† surmonter leurs difficult√©s sp√©cifiques."
            
            # Get response from LLM
            with st.spinner("Cr√©ation de solutions personnalis√©es en cours..."):
                llm_response = llm_connector.generate_response(
                    prompt=prompt,
                    system_prompt=system_prompt,
                    max_tokens=2000,  # Increased token limit for more detailed responses
                    temperature=0.7
                )
                
                # Parse the response
                solution_components = parse_dyscalculia_solution(llm_response)
                
                # Store in session state
                st.session_state['dyscalculia_solution'] = solution_components
                
        except Exception as e:
            st.error(f"Une erreur s'est produite lors de la g√©n√©ration des solutions: {str(e)}")
            
            # Provide a fallback solution if generation fails
            fallback_solution = {
                "visual_exercises": "### Exercice Visuel 1: Les Tours de Nombres\nUtilise des blocs ou des Legos pour repr√©senter les nombres. Chaque bloc vaut 1. Pour repr√©senter 5, construis une tour de 5 blocs.",
                "math_games": "### Jeu 1: La Chasse aux Tr√©sors des Nombres\nCache des cartes avec des nombres dans la maison. L'enfant doit les trouver et les ranger dans l'ordre croissant.",
                "calculator_helper": "### Comment calculer √©tape par √©tape\nPour additionner 24 + 18:\n1. S√©pare les nombres: 24 = 20 + 4, 18 = 10 + 8\n2. Additionne les dizaines: 20 + 10 = 30\n3. Additionne les unit√©s: 4 + 8 = 12\n4. Combine: 30 + 12 = 42",
                "encouraging_messages": "1. Chaque probl√®me que tu r√©sous te rend plus fort en maths!\n2. Les erreurs sont normales, elles nous aident √† apprendre!\n3. Les maths sont comme un jeu, parfois difficile mais toujours amusant quand on comprend!"
            }
            st.session_state['dyscalculia_solution'] = fallback_solution
    
    # Display the solution
    display_dyscalculia_solution(st.session_state['dyscalculia_solution'])